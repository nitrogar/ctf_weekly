use std::convert::TryInto;
use bitvec::prelude::*;
use bitvec::array::BitArray;
use bitvec::access::BitAccess;
use array_init::array_init;
use rayon::prelude::*;

fn xtime(a: u8) -> u8 {
    if a & 0x80 != 0 {
        (a << 1) ^ 0x1b
    } else {
        a << 1
    }
}

fn mix_column(mut a: [u8; 4]) -> [u8; 4] {
    let t = a[0] ^ a[1] ^ a[2] ^ a[3];
    let u = a[0];
    a[0] ^= t ^ xtime(a[0] ^ a[1]);
    a[1] ^= t ^ xtime(a[1] ^ a[2]);
    a[2] ^= t ^ xtime(a[2] ^ a[3]);
    a[3] ^= t ^ xtime(a[3] ^ u);
    a
}

fn sub_bytes(a: [u8; 4]) -> [u8; 4] {
    [
        SBOX[a[0] as usize],
        SBOX[a[1] as usize],
        SBOX[a[2] as usize],
        SBOX[a[3] as usize],
    ]
}

fn xor_bytes(a: [u8; 4], b: [u8; 4]) -> [u8; 4] {
    [
        a[0] ^ b[0],
        a[1] ^ b[1],
        a[2] ^ b[2],
        a[3] ^ b[3],
    ]
}

struct DeltaSet(BitArray<Lsb0, [usize; 1024]>);

impl DeltaSet {
    fn to_index(v: [u8; 2]) -> usize {
        u16::from_le_bytes(v) as usize
    }

    fn add(&mut self, v: [u8; 2]) {
        self.0.set(Self::to_index(v), true);
    }

    fn contains(&self, v: [u8; 2]) -> bool {
        self.0[Self::to_index(v)]
    }
}

fn expected_deltas(d1: u8, d2: u8) -> DeltaSet {
    let mut deltas = DeltaSet(BitArray::zeroed());
    for a in 0..=255 {
        let p = INV_SBOX[a as usize] ^ INV_SBOX[(a ^ d1) as usize];
        let q = INV_SBOX[a as usize] ^ INV_SBOX[(a ^ d2) as usize];
        deltas.add([p, q]);
    }
    deltas
}

fn recover_column(
    pre_delta1: [u8; 4],
    pre_delta2: [u8; 4],
    post_delta1: [u8; 4],
    post_delta2: [u8; 4],
) {
    let expected: [DeltaSet; 4] = array_init(|i| expected_deltas(post_delta1[i], post_delta2[i]));
    (0..=255).into_par_iter().for_each(|a| {
        for b in 0..=255 {
            for c in 0..=255 {
                for d in 0..=255 {
                    let v1 = [a, b, c, d];
                    let v2 = xor_bytes(v1, pre_delta1);
                    let v3 = xor_bytes(v1, pre_delta2);
                    let v1 = mix_column(sub_bytes(v1));
                    let v2 = mix_column(sub_bytes(v2));
                    let v3 = mix_column(sub_bytes(v3));
                    let d1 = xor_bytes(v1, v2);
                    let d2 = xor_bytes(v1, v3);
                    if d1.iter().copied().zip(d2.iter().copied()).enumerate().all(|(i, (a, b))| expected[i].contains([a, b])) {
                        println!("{:02x}{:02x}{:02x}{:02x}", a, b, c, d);
                    }
                }
            }
        }
    });
    println!("--------");
}

fn main() {
    let pre_delta1 = hex::decode("28ca846739017f3a1d9234f625a50381").unwrap();
    let pre_delta2 = hex::decode("56f0c61161841ae23f4c7e9942450b50").unwrap();
    //let post_delta1 = hex::decode("b8c11cb65cb04a2575b929b0616dd313").unwrap();
    //let post_delta2 = hex::decode("5d419f5e0c015d023f5579d68e2e5c2f").unwrap();
    let post_delta1 = hex::decode("e7ad91a01556e3bf9b7c77908ce663ab").unwrap();
    let post_delta2 = hex::decode("15879fa00c86c2153b112ee2bc7b4a2e").unwrap();
    for i in (0..16).step_by(4) {
        recover_column(
            pre_delta1[i..i+4].try_into().unwrap(),
            pre_delta2[i..i+4].try_into().unwrap(),
            post_delta1[i..i+4].try_into().unwrap(),
            post_delta2[i..i+4].try_into().unwrap(),
        );
    }
}

const SBOX: [u8; 256] = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
];

const INV_SBOX: [u8; 256] = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
];
